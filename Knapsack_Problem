import java.util.*;
public class CWJ_DP_Knapsack {
    // Recursion code
    /*public static int knapsack(int val[], int wt[], int W, int n){
        if(n==0 || W==0){
            return 0;
        }
        if(wt[n-1] <=W){
            // Valid

            //Include part
            int ans1 = val[n-1] + knapsack(val,wt,W-wt[n-1],n-1);

            //Exclude part
            int ans2 = knapsack(val,wt,W,n-1);
            return Math.max(ans1,ans2);
        }else{
            return knapsack(val,wt,W,n-1);
        }
    }*/

    // Memoization Code
    public static int Memoknapsack(int val[], int wt[], int W, int n, int dp[][]){
        if(n==0 || W==0){
            return 0;
        }
        if(dp[n][W] != -1){
            return dp[n][W];
        }
        if(wt[n-1] <=W){
            // Valid

            //Include part
            int ans1 = val[n-1] + Memoknapsack(val,wt,W-wt[n-1],n-1, dp);


            //Exclude part
            int ans2 = Memoknapsack(val,wt,W,n-1, dp);
             dp[n][W]= Math.max(ans1,ans2);
             return dp[n][W];
        }else{
            dp[n][W] =  Memoknapsack(val,wt,W,n-1, dp);
            return dp[n][W];
        }
    }
    public static void main(String[] args) {
        int val[] = {15,14,10,45,30};
        int wt[] = {2,5,1,3,4};
        int W=7;
        int dp[][] = new int[val.length+1][W+1];
        for(int i=0; i<=val.length; i++){
            for(int j=0; j<dp[0].length; j++){
                dp[i][j] = -1;
            }
        }
        System.out.println(Memoknapsack(val, wt, W, val.length,dp));
    }
}
